import {
  Heading,
  Box,
  Spacer,
  Button,
  Alert,
  VStack,
  useColorMode,
  AlertIcon,
  useDisclosure,
  Drawer,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  DrawerHeader,
  DrawerBody,
  DrawerFooter,
  IconButton,
  HStack,
} from '@chakra-ui/react';
import useTranslation from 'next-translate/useTranslation';
import { default as NextLink } from 'next/link';
import { MoonIcon, SunIcon, HamburgerIcon } from '@chakra-ui/icons';
import setLanguage from 'next-translate/setLanguage';
import Head from 'next/head';
import { useAccount, useReadContract, useReadContracts } from 'wagmi';
import { NavLink } from '@/components';
import { defaultChain, getContractAddress } from '@/utils/contract';
import LearnToEarnABI from '@/utils/abis/LearnToEarn.json';
import { ConnectButton } from '@rainbow-me/rainbowkit';

interface LayoutProps {
  children: React.ReactNode;
}

interface navItemInterface {
  type: 'navlink' | 'button' | 'dropdown' | 'divider';
  component?: React.ReactNode;
  admin: boolean;
  public: boolean;
}

const MobileNav = (props: { children: React.ReactNode }) => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { t, lang } = useTranslation('common');
  return (
    <>
      <IconButton
        aria-label="Open menu"
        icon={<HamburgerIcon />}
        onClick={onOpen}
        variant="ghost"
        size={'lg'}
      />
      <Drawer isOpen={isOpen} onClose={onClose} placement="left">
        <DrawerOverlay>
          <DrawerContent>
            <DrawerCloseButton />
            <DrawerHeader>Menu</DrawerHeader>
            <DrawerBody>
              <VStack align={'stretch'} spacing={2}>
                {props.children}
              </VStack>
            </DrawerBody>
            <DrawerFooter pt={10}>{t('COPYRIGHT_LINE')}</DrawerFooter>
          </DrawerContent>
        </DrawerOverlay>
      </Drawer>
    </>
  );
};

const Layout = ({ children }: LayoutProps) => {
  const { address, isConnected, chain } = useAccount();
  const { t, lang } = useTranslation('common');
  const { colorMode, toggleColorMode } = useColorMode();

  const LearnContract = {
    address: getContractAddress('LearnToEarn'),
    abi: LearnToEarnABI,
    chainId: chain?.id,
  };

  const { data: ownerAddress } = useReadContract({
    abi: LearnContract.abi,
    address: LearnContract.address,
    functionName: 'owner',
    account: address,
  });

  const { data: isAdmin } = useReadContract({
    abi: LearnContract.abi,
    address: LearnContract.address,
    functionName: 'isAdmin',
    args: [address],
    account: address,
  });

  const hasAdminPermissions = isAdmin || ownerAddress == address;

  const icon = colorMode == 'dark' ? <SunIcon /> : <MoonIcon />;

  const NavItems = (
    <>
      <NavLink as={NextLink} href="/" mr={16}>
        <Heading size="md">
          <pre>{t('nav.HEADING')}</pre>
        </Heading>
      </NavLink>
      {isConnected && chain?.id === defaultChain.id && (
        <NavLink href={'/quests'}>{t('nav.QUESTS')}</NavLink>
      )}
      <NavLink href="/faucet">{t('nav.FAUCET')}</NavLink>
      <Spacer />
      <ConnectButton label={t('wallet.CONNECT')} chainStatus={'icon'} />
      {isConnected && chain?.id === defaultChain.id && hasAdminPermissions && (
        <NavLink href="/admin">{t('nav.ADMIN')}</NavLink>
      )}
      <Button size="md" onClick={toggleColorMode} p={4}>
        {icon}
      </Button>
      <Button size="md" onClick={async () => await setLanguage(lang == 'en' ? 'ja' : 'en')}>
        {lang == 'en' ? '日本' : 'En'}
      </Button>
    </>
  );

  return (
    <>
      <Head>
        <title>{t('nav.HEADING')}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box px={8} position={'fixed'} top={0} left={0} right={0}>
        <HStack display={{ base: 'flex', lg: 'none' }} width={'full'}>
          <MobileNav>
            {NavItems}
            <hr style={{ marginTop: '3em' }} />
          </MobileNav>
          <NavLink as={NextLink} href="/" mr={16}>
            <Heading size="sm">
              <pre>{t('nav.HEADING')}</pre>
            </Heading>
          </NavLink>
          <Spacer />
          <ConnectButton label={t('wallet.CONNECT')} chainStatus={'icon'} />
        </HStack>
        <HStack spacing={1} width={'full'} display={{ base: 'none', lg: 'flex' }}>
          {NavItems}
        </HStack>
      </Box>
      {/*<Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose} size={'xl'}>*/}
      {/*  <ModalOverlay />*/}
      {/*  <ModalContent>*/}
      {/*    <ModalHeader>*/}
      {/*      {t('wallet.SETTINGS')}*/}
      {/*    </ModalHeader>*/}
      {/*    <ModalCloseButton />*/}
      {/*    <ModalBody pb={6}>*/}
      {/*      <ConnectionProfile />*/}
      {/*    </ModalBody>*/}
      {/*    <ModalFooter>*/}
      {/*      <Button onClick={onClose}>Close</Button>*/}
      {/*    </ModalFooter>*/}
      {/*  </ModalContent>*/}
      {/*</Modal>*/}
      <Box overflowY={'auto'} position={'fixed'} top={'60px'} left={0} right={0} bottom={0}>
        {!isConnected && (
          <Alert status={'error'}>
            <AlertIcon />
            {t('wallet.CONNECT_TO_CONTINUE')}
          </Alert>
        )}
        {isConnected && chain?.id !== defaultChain.id && (
          <Alert status={'warning'}>
            <AlertIcon />
            {t('wallet.CONNECTED_TO_DIFFERENT_CHAIN')}
          </Alert>
        )}
        {children}
      </Box>
    </>
  );
};

export default Layout;
